{"ast":null,"code":"import { GET_CONTACT, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CONTACT_ERROR, FILTER_CONTACT, CLEAR_FILTER, CLEAR_CONTACT } from '../types';\n\nconst ContactReducer = (state, action) => {\n  switch (action.type) {\n    case GET_CONTACT:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contact.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACT:\n      return { ...state,\n        contacts: null,\n        filter: null,\n        error: null,\n        current: null\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACT:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\n_c = ContactReducer;\nexport default ContactReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactReducer\");","map":{"version":3,"sources":["/Users/tanavit/Desktop/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACT","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CONTACT_ERROR","FILTER_CONTACT","CLEAR_FILTER","CLEAR_CONTACT","ContactReducer","state","action","type","contacts","payload","loading","contact","filter","_id","error","current","map","id","filtered","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,WADJ,EAEIC,WAFJ,EAGIC,cAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,cANJ,EAOIC,aAPJ,EAQIC,cARJ,EASIC,YATJ,EAUIC,aAVJ,QAWO,UAXP;;AAaA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,WAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFd;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKf,WAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFP;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKd,cAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACM,OAAN,CAAcC,MAAd,CACND,OAAO,IAAIA,OAAO,CAACE,GAAR,KAAgBP,MAAM,CAACG,OAD5B,CAFP;AAKHC,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKP,aAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHG,QAAAA,QAAQ,EAAE,IAFP;AAGHI,QAAAA,MAAM,EAAE,IAHL;AAIHE,QAAAA,KAAK,EAAE,IAJJ;AAKHC,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKhB,cAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeQ,GAAf,CAAmBL,OAAO,IAChCA,OAAO,CAACM,EAAR,KAAeX,MAAM,CAACG,OAAP,CAAeQ,EAA9B,GAAmCX,MAAM,CAACG,OAA1C,GAAoDE,OAD9C,CAFP;AAIHD,QAAAA,OAAO,EAAE;AAJN,OAAP;;AAMJ,SAAKV,aAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHS,QAAAA,KAAK,EAAER,MAAM,CAACG;AAFX,OAAP;;AAIJ,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHU,QAAAA,OAAO,EAAET,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKX,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHU,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKd,cAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHa,QAAAA,QAAQ,EAAEb,KAAK,CAACG,QAAN,CAAeI,MAAf,CAAsBD,OAAO,IAAI;AACvC,gBAAMQ,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,OAAO,CAACU,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BR,OAAO,CAACY,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKjB,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHa,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ;AACI,aAAOb,KAAP;AAjER;;AAkEC;AACJ,CApED;;KAAMD,c;AAsEN,eAAeA,cAAf","sourcesContent":["import {\n    GET_CONTACT,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    CONTACT_ERROR,\n    FILTER_CONTACT,\n    CLEAR_FILTER,\n    CLEAR_CONTACT,\n} from '../types';\n\nconst ContactReducer = (state, action) => {\n    switch (action.type) {\n        case GET_CONTACT:\n            return {\n                ...state,\n                contacts: action.payload,\n                loading: false\n            };\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload],\n                loading: false\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contact.filter(\n                    contact => contact._id !== action.payload\n                ),\n                loading: false\n            };\n        case CLEAR_CONTACT:\n            return {\n                ...state,\n                contacts: null,\n                filter: null,\n                error: null,\n                current: null\n            }\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact =>\n                    contact.id === action.payload.id ? action.payload : contact),\n                loading: false\n            };\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case FILTER_CONTACT:\n            return {\n                ...state,\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            };\n        default:\n            return state;\n    };\n}\n\nexport default ContactReducer;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CONTACT_ERROR, FILTER_CONTACT, CLEAR_FILTER } from '../types';\n\nconst ContactReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACT:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\n_c = ContactReducer;\nexport default ContactReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactReducer\");","map":{"version":3,"sources":["/Users/tanavit/Desktop/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CONTACT_ERROR","FILTER_CONTACT","CLEAR_FILTER","ContactReducer","state","action","type","contacts","payload","filter","contact","id","map","error","current","filtered","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,aANJ,EAOIC,cAPJ,EAQIC,YARJ,QASO,UATP;;AAWA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,WAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAFP,OAAP;;AAIJ,SAAKZ,cAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAvD;AAFP,OAAP;;AAIJ,SAAKT,cAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,GAAf,CAAmBF,OAAO,IAChCA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAP,CAAeG,EAA9B,GAAmCN,MAAM,CAACG,OAA1C,GAAoDE,OAD9C;AAFP,OAAP;;AAKJ,SAAKV,aAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHS,QAAAA,KAAK,EAAER,MAAM,CAACG;AAFX,OAAP;;AAIJ,SAAKX,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHU,QAAAA,OAAO,EAAET,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKV,aAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHU,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKb,cAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,QAAN,CAAeE,MAAf,CAAsBC,OAAO,IAAI;AACvC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEZ,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKd,YAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHW,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ;AACI,aAAOX,KAAP;AA9CR;;AA+CC;AACJ,CAjDD;;KAAMD,c;AAmDN,eAAeA,cAAf","sourcesContent":["import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    CONTACT_ERROR,\n    FILTER_CONTACT,\n    CLEAR_FILTER,\n} from '../types';\n\nconst ContactReducer = (state, action) => {\n    switch (action.type) {\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload]\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact =>\n                    contact.id === action.payload.id ? action.payload : contact)\n            };\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case FILTER_CONTACT:\n            return {\n                ...state,\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            };\n        default:\n            return state;\n    };\n}\n\nexport default ContactReducer;"]},"metadata":{},"sourceType":"module"}